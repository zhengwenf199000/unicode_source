<template>
	<view class="content gather_content" @click="capture">
		<content-bg></content-bg>

		<view class="content-nav">
			<image class="content-nav-home" src="@/static/imgs/Home.png" mode="widthFix" @click="homeClick"></image>
		</view>

		<view class="content-c">
			<view class="gather_content-breadcrumb">
				<text class="gather_content-breadcrumb--textnormal">体征采集</text>
				<view class="gather_content-breadcrumb--textseg"></view>
				<text class="gather_content-breadcrumb--textaction">{{ status }}</text>
			</view>
			<swiper class="gather_content-c" :current="step" :disable-touch="true">
				<swiper-item>
					<view class="gather_content-c--recognizeFace">
						<text class="gather_content-c--recognizeFace---status">正在检测人脸...</text>
						<alive-detect v-if="step === 0" ref="alive_detect"
							class="gather_content-c--recognizeFace---alive_detect" cameratype="black"
							@onDetectFailure="detectFailure" @onDetectSuccess="detectSuccess">
						</alive-detect>
						<!-- <image style="height: 200; width: 200; background: red" :src="facePath"></image> -->
					</view>
				</swiper-item>
				<swiper-item>
					<view class="gather_content-c--fingerprint">
						<text class="gather_content-c--fingerprint---status">请按压指纹...</text>
						<view class="gather_content-c--fingerprint---component">
							<image v-if="!gettedFingerpath" class="gather_content-c--fingerprint---component_icon" src="@/static/imgs/Finger.png"></image>
							<finger-print v-if="step === 1" ref="fingerprint" class="gather_content-c--fingerprint---component_fp"></finger-print>
						</view>
					</view>
				</swiper-item>
				<swiper-item>
					<view class="gather_content-c--audio">
						<view style="align-items: center;">
							<image class="gather_content-c--audio---btn" src="@/static/imgs/Voice.png" @click="startOrStopRecording"></image>
							<text class="gather_content-c--audio---btn gather_content-c--audio---status">{{ recording ? '正在录制...' : '' }}</text>
							<text class="gather_content-c--audio---tint">{{ recording ? '请点击录制按钮结束录制' : '请点击录制按钮，贴近麦克风开始录制' }}</text>
						</view>
						<view class="gather_content-c--audio---sample">
							<text class="gather_content-c--audio---sample----tipb">您可以朗读下面这段文字：</text>
							<text
								class="gather_content-c--audio---sample----tip">我是***司法所的矫正对象***，近期我都有认真反思自己所犯的罪行，并充分认识到罪行的严重性，以后绝不再犯，我服从矫正机构的管理，接受司法机关的监督，我会按时参加矫正机构组织的教育学习、社区服务活动，主动签到上报位置，汇报思想、汇报个人活动情况，我服从矫正机构的安排，积极进取，力争早日成为一个合格的公民。汇报人：***</text>
						</view>
					</view>
				</swiper-item>
			</swiper>
		</view>
	</view>
</template>

<script>
	import {
		requestApi,
		apis,
		upload
	} from '@/utils/http'
	import userInactiveMixin from '@/mixins/userInactiveMixin';
	// #ifndef H5
	const recorderManager = uni.getRecorderManager();
	// #endif

	export default {
		mixins: [ userInactiveMixin ],
		data() {
			return {
				step: 0,
				gettedFingerpath: '',
				fingerpath: '',
				recording: false,
				recordFile: '',
				facePath: ''
			}
		},
		computed: {
			status() {
				if (this.step === 0) {
					return '人脸采集'
				}
				if (this.step === 1) {
					return '指纹采集'
				}
				return '声纹采集'
			}
		},
		watch: {
			step(newV) {
				// 人脸检测
				if (newV === 0) {
					
				} else if (newV === 1) {
					this.startFingerprint()
				} else if (newV === 2) {
					
				}
			}
		},
		onLoad(options) {
			const {
				idnum
			} = options
			this.idnum = idnum

			this.onRecorderStop()
		},
		onReady() {
			if (this.step === 0) {
				this.startAliveDetecting()
			} else if (this.step === 1) {
				this.startFingerprint()
			}
		},
		methods: {
			homeClick() {
				uni.reLaunch({
					url: '/pages/home/home'
				})
			},
			testClick() {
				
			},
			trydo(doo) {
				try {
					doo && doo()
				} catch(e) {
					uni.showToast({
						title: e.message,
						icon: 'none',
						duration: 3000
					})
				}
			},
			startAliveDetecting() {
				setTimeout(() => {
					this.trydo(() => {
						this.$refs.alive_detect.startDetecting((path) => {
							console.log(path);
							if (path) {
								this.$refs.alive_detect.stopDetecting()
								// 上传人脸
								this.upload(path, 'renlian', (remote) => {
									// 成功记录远程人脸链接
									this.facePath = remote
									this.saveBiosignature(remote, 1, () => {
										this.nextStep()
									})
								})
							} else {
					
							}
						})
					})
				}, 1500)
			},
			onRecorderStop() {
				// #ifdef H5
				return;
				// #endif
				// 获取到语音
				recorderManager.onStop(r => {
					this.recordFile = r.tempFilePath
					console.log(r.tempFilePath);
					// 录音完成，上传录音
					this.upload(r.tempFilePath, 'shenwen', (remote) => {
						// 成功记录远程录音链接
						this.recordFile = remote
						this.saveBiosignature(remote, 3, () => {
							console.log('声纹采集完毕！');
							uni.showToast({
								title: '声纹采集完成'
							})
							this.nextStep()
						})
					})
				})
			},
			startFingerprint() {
				uni.$u.sleep(1500).then(() => {
					this.trydo(() => {
						this.$refs.fingerprint.getFingerprintImage(path => {
							// setTimeout(() => {
							// 	const path = '123'
							if (path) {
								this.gettedFingerpath = path;
								// 上传指纹
								this.upload(path, 'zhiwen', (remote) => {
									// 成功记录远程指纹链接
									this.fingerpath = remote
									this.saveBiosignature(remote, 2, () => {
										uni.showToast({
											title: '指纹采集完成'
										})
										this.$refs.fingerprint.closeFingerprint()
										this.nextStep()
									})
								})
							}
						})						
					})
				})
			},
			nextStep() {
				if (this.step >= 2) {
					// 完成了采集
					uni.showToast({
						title: '体征采集已完成',
						icon: 'none'
					})
					uni.$u.sleep(1000).then(() => {
						uni.navigateBack()
					})
					return
				}
				this.step++
			},
			upload(path, type, successCallback) {
				uni.showLoading({
					title: '上传中...'
				})
				upload(path, type).then(remote => {
					uni.hideLoading()
					successCallback(remote)
				}).catch(err => {
					uni.showToast({
						title: err,
						icon: 'none'
					})
				})
			},
			saveBiosignature(filePath, type, successCallback) {
				const api = `${ apis.saveBiosignature }?id_num=${ this.idnum }&tzlx=${ type }&filePath=${ filePath }`
				uni.showLoading({
					title: '正在保存特征...'
				})
				requestApi(api, null, { token: this.$store.getters.token }).then(data => {
					uni.hideLoading()
					successCallback()
				}).catch(err => {
					uni.showToast({
						title: err,
						icon: 'none'
					})
					uni.$u.sleep(1000).then(() => {
						uni.navigateBack();
					})
				})
			},
			startOrStopRecording() {
				this.recording ? this.stopRecording() : this.startRecording()
				this.recording = !this.recording
			},
			startRecording() {
				recorderManager.start({
					duration: 600000
				})
			},
			stopRecording() {
				recorderManager.stop()
			},
		}
	}
</script>

<style lang="scss">
	.gather_content {

		& .gather_content-breadcrumb {
			height: 50px;
			flex-direction: row;
			align-items: center;

			& .gather_content-breadcrumb--textnormal {
				color: #666;
				font-size: 16px;
				font-weight: bold;
			}

			& .gather_content-breadcrumb--textseg {
				margin-left: 10px;
				margin-right: 12px;
				width: 10px;
				height: 10px;
				border-top: #666 2px solid;
				border-right: #666 2px solid;
				transform: rotate(45deg);
			}

			& .gather_content-breadcrumb--textaction {
				color: $theme-dark-color;
				font-size: 16px;
				font-weight: bold;
			}
		}

		& .gather_content-c {
			flex: 1;
			background-color: #fff;
			margin-bottom: 15px;
			/* #ifndef APP-NVUE */
			height: 100%;
			/* #endif */

			& .gather_content-c--fingerprint {
				flex: 1;
				justify-content: center;
				align-items: center;
				/* #ifndef APP-NVUE */
				height: 100%;
				/* #endif */

				& .gather_content-c--fingerprint---status {
					font-size: 20px;
					font-weight: bold;
					color: $theme-dark-color;
				}

				& .gather_content-c--fingerprint---component {
					margin-top: 30px;
					width: 200px;
					height: 240px;
					display: flex;
					
					&_icon {
						position: absolute;
						left: 0;
						top: 0;
						width: 200px;
						height: 240px;
					}
					
					&_fp {
						flex: 1;
					}
				}
			}

			.gather_content-c--audio {
				padding: 20px;
				flex: 1;
				align-items: center;
				justify-content: space-around;
				/* #ifndef APP-NVUE */
				height: 100%;
				/* #endif */
				// justify-content: space-around;

				.gather_content-c--audio---btn {
					width: 100px;
					height: 100px;
					// background-color: papayawhip;
				}
				
				.gather_content-c--audio---status {
					padding-top: 10px;
					text-align: center;
					color: $main-color;
				}

				.gather_content-c--audio---tint {
					margin-top: 20px;
					color: $theme-dark-color;
					font-size: 18px;
					font-weight: bold;
					text-align: center;
				}

				.gather_content-c--audio---sample {
					align-items: flex-start;

					.gather_content-c--audio---sample----tipb {
						color: $theme-dark-color;
						font-size: 18px;
						font-weight: bold;
					}

					.gather_content-c--audio---sample----tip {
						color: $theme-dark-color;
						font-size: 16px;
						margin-top: 5px;
					}
				}

			}

			& .gather_content-c--recognizeFace {
				flex: 1;
				align-items: center;
				justify-content: center;

				& .gather_content-c--recognizeFace---status {
					font-size: 24px;
					font-weight: bold;
					color: $theme-dark-color;
				}

				& .gather_content-c--recognizeFace---alive_detect {
					margin-top: 20px;
					width: 800px;
					height: 300px;
					background-color: wheat;
				}
			}

		}
	}
</style>
